#!/usr/bin/python
#
# Copyright (C) Citrix Systems Inc.
#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU Lesser General Public License as published 
# by the Free Software Foundation; version 2.1 only.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
# A plugin for synchronizing slaves when something changes on the Master

import sys
import os
import XenAPIPlugin
sys.path.append("/opt/xensource/sm/")
import util
from lock import Lock
import lvhdutil
import vhdutil
import lvutil

TRIM_LV_TAG = "_trim_lv"
def _vg_by_sr_uuid(sr_uuid):
    return lvhdutil.VG_PREFIX + sr_uuid

def _lvpath_by_vg_lv_name(vg_name, lv_name):
    return os.path.join(lvhdutil.VG_LOCATION, vg_name, lv_name)

def do_trim(session, args):
    """Attempt to trim the given LVHDSR"""
    util.SMlog("do_trim: %s" % args)
    sr_uuid = args["sr_uuid"]

    # Lock SR, get vg empty space details
    lock = Lock(vhdutil.LOCK_TYPE_SR, sr_uuid)
    if lock.acquireNoblock():
        try:
            vg_name = _vg_by_sr_uuid(sr_uuid)
            lv_name = sr_uuid + TRIM_LV_TAG
            lv_path = _lvpath_by_vg_lv_name(vg_name, lv_name)

            # Clean trim LV in case the previous trim attemp failed
            if lvutil.exists(lv_path):
                lvutil.remove(lv_path)

            # Perform a lvcreate and lvremove to trigger trim on the array
            lvutil.create(lv_name, 0, vg_name, activate=True,
                          size_in_percetage="100%F")
            lvutil.remove(lv_path,  config_array=["issue_discards=1"])
            util.SMlog("Trim on SR: %s complete. " % sr_uuid)
            return str(True)
        finally:
            lock.release()
    else:
        util.SMlog("Could not complete Trim on %s, Lock unavailable !" \
                   % sr_uuid)
        return str(False)


if __name__ == "__main__":
    XenAPIPlugin.dispatch({"do_trim": do_trim})
